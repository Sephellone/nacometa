const inputElement=document.querySelector(".drop-zone__input"),dropZoneElement=inputElement.closest(".drop-zone"),updateThumbnail=(e,n)=>{let t=e.querySelector(".drop-zone__thumb");if(t||(t=document.createElement("div"),t.classList.add("drop-zone__thumb"),e.appendChild(t)),t.dataset.label=n.name,n.type.startsWith("image/")){const e=new FileReader;e.readAsDataURL(n),e.onload=()=>{t.style.backgroundImage=`url('${e.result}')`}}else t.style.backgroundImage=null},removeThumb=()=>{let e=dropZoneElement.querySelector(".drop-zone__thumb");e&&e.remove()},initiateDropZone=()=>{dropZoneElement.addEventListener("click",(()=>{inputElement.click()})),inputElement.addEventListener("change",(()=>{inputElement.files.length&&updateThumbnail(dropZoneElement,inputElement.files[0])})),dropZoneElement.addEventListener("dragover",(e=>{e.preventDefault(),removeThumb(),dropZoneElement.classList.add("drop-zone--over")})),["dragleave","dragend"].forEach((e=>{dropZoneElement.addEventListener(e,(e=>{dropZoneElement.classList.remove("drop-zone--over")}))})),dropZoneElement.addEventListener("drop",(e=>{e.preventDefault(),e.dataTransfer.files.length&&(inputElement.files=e.dataTransfer.files,updateThumbnail(dropZoneElement,e.dataTransfer.files[0])),dropZoneElement.classList.remove("drop-zone--over")}))};export{initiateDropZone};